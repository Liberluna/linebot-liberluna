import { parseBody } from './utils/body.ts';
import { parse } from './utils/cookie.ts';
import { getQueryParam, getQueryParams } from './utils/url.ts';
export class HonoRequest {
    raw;
    paramData;
    validatedData;
    path;
    constructor(request, path = '/', paramData){
        this.raw = request;
        this.path = path;
        this.paramData = paramData;
        this.validatedData = {};
    }
    param(key) {
        if (this.paramData) {
            if (key) {
                const param = this.paramData[key];
                return param ? /\%/.test(param) ? decodeURIComponent(param) : param : undefined;
            } else {
                const decoded = {};
                for (const [key1, value] of Object.entries(this.paramData)){
                    if (value && typeof value === 'string') {
                        decoded[key1] = /\%/.test(value) ? decodeURIComponent(value) : value;
                    }
                }
                return decoded;
            }
        }
        return null;
    }
    query(key) {
        return getQueryParam(this.url, key);
    }
    queries(key) {
        return getQueryParams(this.url, key);
    }
    header(name) {
        const headerData = {};
        this.raw.headers.forEach((value, key)=>{
            headerData[key] = value;
        });
        if (!name) {
            return headerData;
        }
        return headerData[name.toLowerCase()] || undefined;
    }
    cookie(key) {
        const cookie = this.raw.headers.get('Cookie');
        if (!cookie) return;
        const obj = parse(cookie);
        if (key) {
            const value = obj[key];
            return value;
        } else {
            return obj;
        }
    }
    async parseBody() {
        return await parseBody(this.raw);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    json() {
        return this.raw.json();
    }
    text() {
        return this.raw.text();
    }
    arrayBuffer() {
        return this.raw.arrayBuffer();
    }
    blob() {
        return this.raw.blob();
    }
    formData() {
        return this.raw.formData();
    }
    addValidatedData(target, data) {
        this.validatedData[target] = data;
    }
    valid(target) {
        if (target) {
            return this.validatedData[target];
        }
    }
    get url() {
        return this.raw.url;
    }
    get method() {
        return this.raw.method;
    }
    get headers() {
        return this.raw.headers;
    }
    get redirect() {
        return this.raw.redirect;
    }
    get body() {
        return this.raw.body;
    }
    get bodyUsed() {
        return this.raw.bodyUsed;
    }
    get cache() {
        return this.raw.cache;
    }
    get credentials() {
        return this.raw.credentials;
    }
    get integrity() {
        return this.raw.integrity;
    }
    get keepalive() {
        return this.raw.keepalive;
    }
    get mode() {
        return this.raw.mode;
    }
    get referrer() {
        return this.raw.referrer;
    }
    get refererPolicy() {
        return this.raw.referrerPolicy;
    }
    get signal() {
        return this.raw.signal;
    }
}
//# sourceMappingURL=data:application/json;base64,