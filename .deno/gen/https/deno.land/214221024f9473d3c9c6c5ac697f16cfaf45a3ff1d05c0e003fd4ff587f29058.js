import { getPathFromURL } from '../utils/url.ts';
export const mergePath = (base, path)=>{
    base = base.replace(/\/+$/, '');
    base = base + '/';
    path = path.replace(/^\/+/, '');
    return base + path;
};
export const replaceUrlParam = (urlString, params)=>{
    for (const [k, v] of Object.entries(params)){
        const reg = new RegExp('/:' + k);
        urlString = urlString.replace(reg, `/${v}`);
    }
    return urlString;
};
export const removeIndexString = (urlSting)=>{
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const path = getPathFromURL(urlSting);
    return urlSting.replace(/\/index$/, '/');
};
function isObject(item) {
    return typeof item === 'object' && item !== null && !Array.isArray(item);
}
export function deepMerge(target, source) {
    if (!isObject(target) && !isObject(source)) {
        return source;
    }
    const merged = {
        ...target
    };
    for(const key in source){
        const value = source[key];
        if (isObject(merged[key]) && isObject(value)) {
            merged[key] = deepMerge(merged[key], value);
        } else {
            merged[key] = value;
        }
    }
    return merged;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaG9ub0B2My4xLjYvY2xpZW50L3V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFBhdGhGcm9tVVJMIH0gZnJvbSAnLi4vdXRpbHMvdXJsLnRzJ1xuaW1wb3J0IHR5cGUgeyBPYmplY3RUeXBlIH0gZnJvbSAnLi90eXBlcy50cydcblxuZXhwb3J0IGNvbnN0IG1lcmdlUGF0aCA9IChiYXNlOiBzdHJpbmcsIHBhdGg6IHN0cmluZykgPT4ge1xuICBiYXNlID0gYmFzZS5yZXBsYWNlKC9cXC8rJC8sICcnKVxuICBiYXNlID0gYmFzZSArICcvJ1xuICBwYXRoID0gcGF0aC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICByZXR1cm4gYmFzZSArIHBhdGhcbn1cblxuZXhwb3J0IGNvbnN0IHJlcGxhY2VVcmxQYXJhbSA9ICh1cmxTdHJpbmc6IHN0cmluZywgcGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSA9PiB7XG4gIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKHBhcmFtcykpIHtcbiAgICBjb25zdCByZWcgPSBuZXcgUmVnRXhwKCcvOicgKyBrKVxuICAgIHVybFN0cmluZyA9IHVybFN0cmluZy5yZXBsYWNlKHJlZywgYC8ke3Z9YClcbiAgfVxuICByZXR1cm4gdXJsU3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCByZW1vdmVJbmRleFN0cmluZyA9ICh1cmxTdGluZzogc3RyaW5nKSA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgY29uc3QgcGF0aCA9IGdldFBhdGhGcm9tVVJMKHVybFN0aW5nKVxuICByZXR1cm4gdXJsU3RpbmcucmVwbGFjZSgvXFwvaW5kZXgkLywgJy8nKVxufVxuXG5mdW5jdGlvbiBpc09iamVjdChpdGVtOiB1bmtub3duKTogaXRlbSBpcyBPYmplY3RUeXBlIHtcbiAgcmV0dXJuIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KGl0ZW0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwTWVyZ2U8VD4odGFyZ2V0OiBULCBzb3VyY2U6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KTogVCB7XG4gIGlmICghaXNPYmplY3QodGFyZ2V0KSAmJiAhaXNPYmplY3Qoc291cmNlKSkge1xuICAgIHJldHVybiBzb3VyY2UgYXMgVFxuICB9XG4gIGNvbnN0IG1lcmdlZCA9IHsgLi4udGFyZ2V0IH0gYXMgT2JqZWN0VHlwZTxUPlxuXG4gIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xuICAgIGNvbnN0IHZhbHVlID0gc291cmNlW2tleV1cbiAgICBpZiAoaXNPYmplY3QobWVyZ2VkW2tleV0pICYmIGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgbWVyZ2VkW2tleV0gPSBkZWVwTWVyZ2UobWVyZ2VkW2tleV0sIHZhbHVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBtZXJnZWRba2V5XSA9IHZhbHVlIGFzIFRba2V5b2YgVF0gJiBUXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlZCBhcyBUXG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxjQUFjLFFBQVEsa0JBQWlCO0FBR2hELE9BQU8sTUFBTSxZQUFZLENBQUMsTUFBYyxPQUFpQjtJQUN2RCxPQUFPLEtBQUssT0FBTyxDQUFDLFFBQVE7SUFDNUIsT0FBTyxPQUFPO0lBQ2QsT0FBTyxLQUFLLE9BQU8sQ0FBQyxRQUFRO0lBQzVCLE9BQU8sT0FBTztBQUNoQixFQUFDO0FBRUQsT0FBTyxNQUFNLGtCQUFrQixDQUFDLFdBQW1CLFNBQW1DO0lBQ3BGLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLE9BQU8sT0FBTyxDQUFDLFFBQVM7UUFDM0MsTUFBTSxNQUFNLElBQUksT0FBTyxPQUFPO1FBQzlCLFlBQVksVUFBVSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDNUM7SUFDQSxPQUFPO0FBQ1QsRUFBQztBQUVELE9BQU8sTUFBTSxvQkFBb0IsQ0FBQyxXQUFxQjtJQUNyRCw2REFBNkQ7SUFDN0QsTUFBTSxPQUFPLGVBQWU7SUFDNUIsT0FBTyxTQUFTLE9BQU8sQ0FBQyxZQUFZO0FBQ3RDLEVBQUM7QUFFRCxTQUFTLFNBQVMsSUFBYSxFQUFzQjtJQUNuRCxPQUFPLE9BQU8sU0FBUyxZQUFZLFNBQVMsSUFBSSxJQUFJLENBQUMsTUFBTSxPQUFPLENBQUM7QUFDckU7QUFFQSxPQUFPLFNBQVMsVUFBYSxNQUFTLEVBQUUsTUFBK0IsRUFBSztJQUMxRSxJQUFJLENBQUMsU0FBUyxXQUFXLENBQUMsU0FBUyxTQUFTO1FBQzFDLE9BQU87SUFDVCxDQUFDO0lBQ0QsTUFBTSxTQUFTO1FBQUUsR0FBRyxNQUFNO0lBQUM7SUFFM0IsSUFBSyxNQUFNLE9BQU8sT0FBUTtRQUN4QixNQUFNLFFBQVEsTUFBTSxDQUFDLElBQUk7UUFDekIsSUFBSSxTQUFTLE1BQU0sQ0FBQyxJQUFJLEtBQUssU0FBUyxRQUFRO1lBQzVDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsVUFBVSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ3ZDLE9BQU87WUFDTCxNQUFNLENBQUMsSUFBSSxHQUFHO1FBQ2hCLENBQUM7SUFDSDtJQUVBLE9BQU87QUFDVCxDQUFDIn0=